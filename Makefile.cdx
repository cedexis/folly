VAGRANT_DIR=/vagrant/folly
LABEL=cdx-folly
CCACHE=ccache/ccache.tgz

default : package

package : GIT_HASH := $(shell git rev-parse HEAD)
package : build
	# Pull out our built files from the docker
	docker rm -f $(LABEL)_exfiltrate || true
	docker create -it --name $(LABEL)_exfiltrate $$(cat build.cdx/docker_image_id) bash
	docker cp $(LABEL)_exfiltrate:/home/install build.cdx
	docker rm -f $(LABEL)_exfiltrate
	
	# Build our FPM docker and use it
	cd build.cdx && docker build -f ../Dockerfile.cdx -t $(LABEL)_fpm .
	docker run -it -v $$(pwd)/build.cdx:/build -w /build \
		$(LABEL)_fpm \
		fpm -f -C /install -n cdx-folly \
		--deb-no-default-config-files \
		--version 1.6.5 \
		--description "Git Commit: $(GIT_HASH)" \
		-s dir -t deb usr

.PHONY: clean
clean :
	rm -rf build.cdx

build : build.cdx/docker_dir
	echo Building from docker in $$(cat build.cdx/docker_dir)
	# If we don't care about ccache, I think the next two lines could just be:
	#(cd $$(cat build.cdx/docker_dir) && docker build . 2>&1) | tee build.cdx/docker_log
	cp build/fbcode_builder/docker_build_with_ccache.sh $$(cat build.cdx/docker_dir)
	(CCACHE=$$(pwd)/ccache; cd $$(cat build.cdx/docker_dir) && ./docker_build_with_ccache.sh $$CCACHE) | tee build.cdx/docker_log
	awk -F' ' '/Successfully built/ { print $$3 }' build.cdx/docker_log > build.cdx/docker_image_id

build.cdx/docker_dir: folly/VERSION
	# Bootstrap ccache with an empty tar if need be
	# (This is adapted from travis_docker_build.sh)
	[ -e "$(CCACHE)" ] || tar -T /dev/null -czf $(CCACHE)
	# Build our docker context
	mkdir -p build.cdx
	cd build && ./fbcode_builder/make_docker_context.py \
		--local-repo-dir $$(pwd)/.. \
		--ccache-tgz $$(pwd)/../$(CCACHE) \
		> ../build.cdx/docker_dir

# ================
# Vagrant machinery

vagrant-up : clean
	vagrant up

vagrant-bash:
	vagrant ssh -c "cd $(VAGRANT_DIR) && make docker-bash"

vagrant-destroy:
	vagrant destroy

vagrant-build:
	vagrant ssh -c "cd $(VAGRANT_DIR) && make docker-build"

vagrant-package:
	vagrant ssh -c "cd $(VAGRANT_DIR) && make docker-package"

# ================
# Build directly in docker if we're running on a compatible host

docker-build: build

docker-package: package

docker-bash: build
	docker run -it $$(cat build.cdx/docker_image_id) /bin/bash

# ================
#

